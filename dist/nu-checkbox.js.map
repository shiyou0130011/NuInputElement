{"version":3,"file":"nu-checkbox.js","mappings":"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","sources":["webpack://nu-input-element/./src/modules/nu-toggle-input-element.js","webpack://nu-input-element/./src/nu-checkbox.js"],"sourcesContent":["export class NuToggleInputElement extends HTMLElement{\r\n\t#form = null\r\n\t#formDataEventHandler = null\r\n\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.role = \"textbox\"\r\n\t}\r\n\t\r\n\tstatic get observedAttributes() {\r\n\t\treturn [\"name\", \"value\", \"disabled\", \"readonly\", \"nonce\", \"checked\"]\r\n\t}\r\n\t\r\n\tset disabled(d){\r\n\t\tif(d === true || d === 1 || ((\"string\" == typeof d) && d.toLowerCase() == \"disabled\") ){\r\n\t\t\tthis.setAttribute(\"disabled\", \"disabled\")\r\n\t\t}else{\r\n\t\t\tthis.removeAttribute(\"disabled\")\r\n\t\t}\r\n\t}\r\n\r\n\tset readonly(r){\r\n\t\tif(r === true || r === 1 || ((\"string\" == typeof r) && r.toLowerCase() == \"readonly\") ){\r\n\t\t\tthis.setAttribute(\"readonly\", \"readonly\")\r\n\t\t}else{\r\n\t\t\tthis.removeAttribute(\"readonly\")\r\n\t\t}\r\n\t}\r\n\r\n\tget disabled(){\r\n\t\treturn this.getAttribute(\"disabled\") != null && (this.getAttribute(\"disabled\") === \"\" || (this.getAttribute(\"disabled\") || \"\").toLowerCase() == \"disabled\")\r\n\t}\r\n\tget readonly(){\r\n\t\treturn this.getAttribute(\"readonly\") != null && (this.getAttribute(\"readonly\") === \"\" || (this.getAttribute(\"readonly\") || \"\").toLowerCase() == \"readonly\")\r\n\t}\r\n\tset nonce(n){\r\n\t\tthis.setAttribute(\"nonce\", \"n\")\r\n\t}\r\n\tget nonce(){\r\n\t\treturn this.getAttribute(\"nonce\")\r\n\t}\r\n\r\n\tget name(){\r\n\t\treturn this.getAttribute(\"name\")\r\n\t}\r\n\tset name(data){\r\n\t\tthis.setAttribute(\"name\", data)\r\n\t}\r\n\r\n\tget checked(){\r\n\t\treturn false\r\n\t}\r\n\r\n\tset value(v){\r\n\t\tthis.setAttribute(\"value\", v)\r\n\t}\r\n\t\r\n\tget value(){\r\n\t\tif(this.getAttribute(\"value\") !== \"\"){\r\n\t\t\treturn this.getAttribute(\"value\")\r\n\t\t}\r\n\t\treturn \"on\"\r\n\t}\r\n\t\r\n\ttoString(){return `[object NuToggleInputElement]`}\r\n\tconnectedCallback(){\r\n\t\tlet elm = this\r\n\t\tthis.#formDataEventHandler = function(e){\r\n\t\t\tif(e instanceof FormDataEvent){\r\n\t\t\t\tif(elm.name != \"\" && elm.checked){\r\n\t\t\t\t\tif(elm.value){\r\n\t\t\t\t\t\te.formData.append(elm.name, elm.value)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet a = this\r\n\t\twhile (a) {\r\n\t\t\ta = a.parentNode\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(!a){\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\tif (a.tagName == \"FORM\"){\r\n\t\t\t\tthis.#form = a\r\n\t\t\t\ta.addEventListener(\"formdata\", this.#formDataEventHandler)\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\tdisconnectedCallback(){\r\n\t\tif(!this.#form){\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.#form.removeEventListener(\"formdata\", this.#formDataEventHandler)\r\n\r\n\t}\r\n\r\n\tattributeChangedCallback(name, oldValue, newValue){\r\n\t\tswitch(name){\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\tthis.shadowRoot.querySelectorAll(\"style, script\").forEach(function(elem){\r\n\t\t\t\t\telem.setAttribute(\"nonce\", newValue)\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n}","import {NuToggleInputElement} from \"./modules/nu-toggle-input-element.js\"\r\n\r\n/**\r\n * An element which is similar as Appleâ€™s toggle element (https://developer.apple.com/design/human-interface-guidelines/toggles).\r\n * \r\n * @attribute name  Same as the attribute of the same name as input\r\n * @attribute value Same as the attribute of the same name as input\r\n * \r\n * @element nu-checkbox\r\n * @csspart --label-font-size\r\n * @csspart --checkbox-width\r\n * @csspart --checkbox-height\r\n * @csspart --checkbox-outline-size\r\n * @csspart --checkbox-background\r\n * @csspart --checkbox-inner-background\r\n * @csspart --checkbox-text-space\r\n * @csspart --checkbox-checked-background\r\n * @csspart --checkbox-checked-inner-background\r\n */\r\nclass NuCheckboxElement extends NuToggleInputElement{\r\n\ttoString(){return `[object NuCheckboxElement]`}\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tlet currentElement = this\r\n\t\tlet shadowRoot = this.attachShadow({mode: 'open'})\r\n\t\tlet temp = document.createElement(\"template\")\r\n\r\n\t\ttemp.innerHTML =`\r\n\t\t<style>\r\n\t\t\t:host{\r\n\t\t\t\t--label-font-size: 1rem;\r\n\t\t\t\r\n\t\t\t\t--checkbox-width: 2.5rem;\r\n\t\t\t\t--checkbox-height: var(--label-font-size);\r\n\t\t\t\t--checkbox-outline-size: 0.2rem;\r\n\t\t\t\t--checkbox-background: gray;\r\n\t\t\t\t--checkbox-inner-background: white;\r\n\t\t\t\t\r\n\t\t\t\t--checkbox-text-space: .5rem;\r\n\r\n\t\t\t\t--checkbox-checked-background: darkgreen;\r\n\t\t\t\t--checkbox-checked-inner-background: var(--checkbox-inner-background);\r\n\t\t\t}\r\n\r\n\t\t\t#checkbox-content label{\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tcolumn-gap: var(--checkbox-text-space);\r\n\t\t\t\theight: var(--checkbox-height);\r\n\t\t\t\t\r\n\t\t\t\talign-items: center;\r\n\t\t\t}\r\n\t\t\t#checkbox-outer{\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: var(--checkbox-width);\r\n\t\t\t\tbackground-color: var(--checkbox-background);\r\n\t\t\t\theight: var(--checkbox-height);\r\n\t\t\t\t\r\n\t\t\t\toutline-width: var(--checkbox-outline-size);\r\n\t\t\t\toutline-style: solid;\r\n\t\t\t\toutline-offset: 0;\r\n\t\t\t\toutline-color: var(--checkbox-background);\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tborder-radius: var(--checkbox-height);\r\n\t\t\t}\r\n\t\t\t#checkbox-inner{\r\n\t\t\t\tbackground-color: var(--checkbox-inner-background);\r\n\t\t\t\theight: var(--checkbox-height);\r\n\t\t\t\twidth: var(--checkbox-height);\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tborder-radius: 50%;\r\n\t\t\t\t\r\n\t\t\t\tmargin-left: 0;\r\n\t\t\t\t\r\n\t\t\t\ttransition: margin .5s;\r\n\t\t\t}\r\n\t\t\tdiv{\r\n\t\t\t\tfont-size: var(--label-font-size);\r\n\t\t\t\tfont-family: sans-serif\r\n\t\t\t}\r\n\t\t\t::slotted([slot=label]){\r\n\t\t\t\tfont-size: var(--label-font-size);\r\n\t\t\t\tfont-family: sans-serif\r\n\t\t\t}\r\n\t\t\tinput[type=checkbox]{\r\n\t\t\t\tdisplay: none\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tinput[type=checkbox]:checked ~ label #checkbox-outer #checkbox-inner{\r\n\t\t\t\tmargin-left: auto;\t\t\r\n\t\t\t}\r\n\r\n\t\t\tinput[type=checkbox]:checked ~ label #checkbox-outer{\r\n\t\t\t\tbackground-color: var(--checkbox-checked-background);\r\n\t\t\t\toutline-color: var(--checkbox-checked-background);\r\n\t\t\t}\r\n\t\t\tinput[type=checkbox]:checked ~ label #checkbox-outer #checkbox-inner{\r\n\t\t\t\tbackground-color: var(--checkbox-checked-inner-background)\r\n\t\t\t}\r\n\t\t</style>\r\n\t\t<div id=\"checkbox-content\">\r\n\t\t\t<input type=\"checkbox\" id=\"cb\"/>\r\n\t\t\t<label for=\"cb\">\r\n\t\t\t\t<span id=\"checkbox-outer\">\r\n\t\t\t\t\t<span id=\"checkbox-inner\"></span>\r\n\t\t\t\t</span>\r\n\t\t\t\t<slot name=\"label\"></slot>\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t\t`\r\n\t\tshadowRoot.appendChild(document.importNode(temp.content, true))\r\n\t\tcurrentElement.role = \"checkbox\"\t\r\n\t}\r\n\r\n\tstatic get observedAttributes() {\r\n\t\treturn [... super.observedAttributes]\r\n\t}\r\n\r\n\tset checked(value){\r\n\t\tlet result = value == \"checked\" || value === true || value === 1\r\n\t\tif(result){\r\n\t\t\tthis.setAttribute(\"checked\", \"\")\r\n\t\t}else{\r\n\t\t\tthis.removeAttribute(\"checked\")\r\n\t\t}\r\n\t}\r\n\tget checked(){\r\n\t\treturn this.shadowRoot.querySelector(\"[type=checkbox]\").checked\r\n\t}\r\n\r\n\tattributeChangedCallback(name, oldValue, newValue){\r\n\t\tsuper.attributeChangedCallback(name, oldValue, newValue)\r\n\r\n\t\tswitch(name){\r\n\t\t\tcase \"checked\": \r\n\t\t\t\tlet checked = newValue == \"checked\" || newValue === \"\"\r\n\t\t\t\tthis.shadowRoot.querySelector(\"checkbox\").checked = checked\r\n\t\t\t\tthis.ariaChecked = checked\r\n\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\ncustomElements.define(\"nu-checkbox\", NuCheckboxElement)\r\n"],"names":["NuToggleInputElement","HTMLElement","constructor","super","this","role","observedAttributes","disabled","d","toLowerCase","setAttribute","removeAttribute","readonly","r","getAttribute","nonce","n","name","data","checked","value","v","toString","connectedCallback","elm","e","FormDataEvent","formData","append","a","parentNode","tagName","addEventListener","disconnectedCallback","removeEventListener","attributeChangedCallback","oldValue","newValue","shadowRoot","querySelectorAll","forEach","elem","customElements","define","attachShadow","mode","temp","document","createElement","innerHTML","appendChild","importNode","content","querySelector","ariaChecked"],"sourceRoot":""}